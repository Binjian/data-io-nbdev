[build-system]
requires = ["poetry-core>=1.0.0", "setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "data-io-nbdev"
description="data-io-nbd: A python package providing infrastructures for eos project"
version = "1.0.0"
readme = "README.md"
keywords = ["pandas", "multithreading", "jupyter", "notebook", "nbdev", "io", "dataflow"]
authors= [
    {name = "Binjian Xin", email = "binjian.xin@hotmail.com"},
]
maintainers= [
    {name = "Binjian Xin", email = "binjian.xin@hotmail.com"},
]
license = {text = "BSD 3-Clause License"}
classifiers = [
    "Frameworks :: Pytest",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "mypy",
    "pylint",
    "typing_inspect",
    "typeguard",
    "dacite",  # for dataclass from_dict
    "poetry",
    "tensorflow==2.14.0",
    "tensorflow-estimator",
    "tensorflow-probability",
    "tensorboard",
    "python-json-logger",
    "plotly",
    "Pillow",
    "pandas",
    "ordered-set",
    "opt-einsum",
    "jupyterlab",
    "jupyter-contrib-nbextensions",
    "notebook",
    "keras",
    "numpy",
    "scipy",
    "seaborn",
    "scikit-learn",
    "matplotlib",
    "pytest",
    "reportlab",
    "pymongo",
    "fastavro",
    "gitpython",
    "jupytext",
    "tqdm",
    "pandas-stubs",
    "nbstripout",
    "pip",
    "matplotlib-stubs",
    "pyarrow",
    "dask",
    "types-tensorflow",
    "pydantic==2.1.1",
    "typeguard",
    "poetry2conda",
    "rocketmq",
    "cutelog",
    "pyqt5==5.15.3",
    "pdoc3"
]

[tool.setuptools.packages.find]
exclude = ["data", "img", "stubs", "stubs.*", "stubs.*.*", "stubs_3rd_parties", "stubs_3rd_parties.*", "stubs_3rd_parties.*.*", "suite", "tests", "tests.*", "tests.*.*", "tests.*.*.*"]

[tool.poetry]
name = "data-io-nbdev"
version = "1.5.0"
description="data-io-nbd: A python package providing infrastructures for eos project"
authors = ["binjian.xin <binjian.xin@hotmail.com>"]
maintainers = ["binjian.xin <binjian.xin@hotmail.com>"]
readme = "README.md"
license = "LICENSE"
repository = "git@github.com:Binjian/data-io-nbdev.git"
keywords = ["pandas", "multithreading", "jupyter", "notebook", "nbdev", "io", "dataflow"]
classifiers = [
    "Frameworks :: Pytest",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3.10",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
include = ["nbs/*", "dev_nbs/*", "data/*", "dta_io_nbdev"]
#virtualenvs.in-project = true

[tool.poetry.dependencies]
python = ">=3.10,<3.12"


[tool.poetry.dev-dependencies]
pytest = ">=7.4"

[tool.poetry.scripts]
my-script = "eos.eos.realtime_train_infer_ddpg:__main__"

[[tool.poetry.source]]
name = "official"
url = "https://pypi.org/simple"
default = true

[[tool.poetry.source]]
name = "aliyun"
url = "https://mirrors.aliyun.com/pypi/simple"
secondary = true

[tool.poetry2conda]
name = "eos-conda"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py311"

# Enable all checks of notebooks
extend-include = ["*.ipynb"]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"  # google, numpy, pep257, pep287, short, or short_numpy