# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/01.data.core.ipynb.

# %% auto 0
__all__ = ['KvaserType', 'RCANType', 'RawType', 'veos_lifetime_start_date', 'veos_lifetime_end_date', 'MotionPower', 'ECUMixin',
           'say_hi']

# %% ../../nbs/01.data.core.ipynb 3
import re
from configparser import ConfigParser
from datetime import datetime
from pathlib import Path
from typing import Dict, List, NamedTuple, Optional, Tuple, TypeVar, Union, TypeAlias
from zoneinfo import ZoneInfo  # type: ignore


# %% ../../nbs/01.data.core.ipynb 4
import pandas as pd  # type: ignore
from pydantic import BaseModel, Field, GetPydanticSchema  # type: ignore
from pydantic.dataclasses import dataclass  # type: ignore
from typing_extensions import TypedDict
from .location import EosLocation


# %% ../../nbs/01.data.core.ipynb 6
KvaserType: TypeAlias = dict[str, str]
RCANType: TypeAlias = dict[str, dict[str, list[Union[str, list[list[str]]]]]]
RawType: TypeAlias = Union[KvaserType, RCANType]


# %% ../../nbs/01.data.core.ipynb 7
#  Define TypedDict for type hinting of typed collections: records and episodes
veos_lifetime_start_date: pd.Timestamp = pd.Timestamp(
    ts_input="2021-01-01T00:00:00+08:00", tz="Asia/Shanghai"
)
veos_lifetime_end_date: pd.Timestamp = pd.Timestamp(
    ts_input="2031-12-31T00:00:00+08:00", tz="Asia/Shanghai"
)


# %% ../../nbs/01.data.core.ipynb 8
class MotionPower(NamedTuple):
    """
    Motion power tuple
    
    Attributes:
        
        timestep: timestamp of the tuple
        velocity: velocity in m/s,
        thrust: thrust in percentage of full acc pedal,
        brake: brake in percentage of full brake pedal,
        current: current in A,
        voltage: voltage in V,
    
    return:
    
            MotionPower tuple    
    """
    timestep: pd.Timestamp  # timestamp of the tuple
    velocity: float  # velocity in m/s
    thrust: float  # thrust in percentage of full acc pedal
    brake: float  # brake in percentage of full brake pedal
    current: float  # current in A
    voltage: float  # voltage in V


# %% ../../nbs/01.data.core.ipynb 10
class ECUMixin(BaseModel):
    """
    ECU mixin class
    
    Attributes:
        
        ecu_observation_number: number of observations per ECU
        ecu_observation_frequency: frequency of observations per ECU
        ecu_countdown: countdown time for ECU
        
    return:
    
            ECU mixin class
    """
    # optional: can be adjusted by developer
    ecu_observation_number: int = 30
    #     (KvaserMixin.kvaser_observation_number
    # )  # 30  # Kvaser number of one observation unit: 30 as count number
    ecu_observation_frequency: int = 20
    #     (KvaserMixin.kvaser_observation_frequency
    #     # 20  # Kvaser observation frequency: 20 Hz, fixed by hardware setting
    # )
    ecu_countdown: int = 3
    #     (KvaserMixin.kvaser_countdown
    #     # 3  # Kvaser countdown time: 3 seconds, optional: can be adjusted by developer
    # )

# %% ../../nbs/01.data.core.ipynb 12
def say_hi(to: str):
    """
    Say hello to somebody
    
    
    Args:
        to: somebody to say hello to
    """
    
    return f'Hi {to}!'
